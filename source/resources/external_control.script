# HEADER_BEGIN

#Constants
TRAJECTORY_RESULT_SUCCESS = 0
TRAJECTORY_RESULT_CANCELED = 1
TRAJECTORY_RESULT_FAILURE = 2

TRAJECTORY_ACTION_CANCEL = -1
TRAJECTORY_ACTION_NOOP = 0
TRAJECTORY_ACTION_START = 1

TRAJECTORY_MOTION_JOINT = 0
TRAJECTORY_MOTION_CARTESIAN = 1

POS_ZOOM_RATIO = {{POS_ZOOM_RATIO_REPLACE}}
TIME_ZOOM_RATIO = {{TIME_ZOOM_RATIO_REPLACE}}
COMMON_ZOOM_RATIO = {{COMMON_ZOOM_RATIO_REPLACE}}

MODE_STOPPED = -2
MODE_UNINITIALIZED = -1
MODE_IDLE = 0
MODE_SERVOJ = 1
MODE_SPEEDJ = 2
MODE_TRAJECTORY = 3
MODE_SPEEDL = 4
MODE_POSE = 5
MODE_FREEDRIVE = 6
MODE_TOOL_IN_CONTACT = 7

STOPJ_ACCELERATION = 4.0

SERVO_UNINITIALIZED = -1
SERVO_IDLE = 0
SERVO_RUNNING = 1

SCRIPT_CMD_ZERO_FTSENSOR = 0
SCRIPT_CMD_SET_PAYLOAD = 1
SCRIPT_CMD_SET_TOOL_VOLTAGE = 2
SCRIPT_CMD_START_FORCE_MODE = 3
SCRIPT_CMD_END_FORCE_MODE = 4

# Data size of the message received on the reverse interface
REVERSE_DATA_SIZE = {{REVERSE_DATA_SIZE_REPLACE}}
TRAJECTORY_DATA_SIZE = {{TRAJECTORY_DATA_SIZE_REPLACE}}
SCRIPT_COMMAND_DATA_SIZE = {{SCRIPT_COMMAND_DATA_SIZE_REPLACE}}

#Global variables are also showed in the Teach pendants variable list
global control_mode
global cmd_speedl_tool_speed
global cmd_speed_joint
global steptime
global trajectory_point_num
global cmd_servo_state, cmd_servo_joints_last, cmd_servo_joints
global extrapolate_max_count, extrapolate_count

def trajectoryThread():
    global trajectory_point_num
    blend_radius = int()
    while trajectory_point_num > 0:
        raw_point = socket_read_binary_integer(TRAJECTORY_DATA_SIZE, "trajectory_socket", get_steptime())
        trajectory_point_num -= 1

        if trajectory_point_num <= 0:
            blend_radius = 0
        else:
            blend_radius = raw_point[20] / POS_ZOOM_RATIO
        
        if raw_point[0] > 0:
            point = [raw_point[1] / POS_ZOOM_RATIO, raw_point[2] / POS_ZOOM_RATIO, raw_point[3] / POS_ZOOM_RATIO, raw_point[4] / POS_ZOOM_RATIO, raw_point[5] / POS_ZOOM_RATIO, raw_point[6] / POS_ZOOM_RATIO]
            time = raw_point[19] / TIME_ZOOM_RATIO
            
            motion_type = raw_point[21]
            
            if motion_type == TRAJECTORY_MOTION_JOINT:
                movej(point, t = time, r = blend_radius)
            elif motion_type == TRAJECTORY_MOTION_CARTESIAN:
                movel(point, t = time, r = blend_radius)
    
    socket_send_int(TRAJECTORY_RESULT_SUCCESS, "trajectory_socket")

def setServoSetpoint(joints):
    global cmd_servo_state, cmd_servo_joints_last, cmd_servo_joints
    cmd_servo_state = SERVO_RUNNING
    cmd_servo_joints_last = cmd_servo_joints
    cmd_servo_joints = joints

def extrapolate():
    global cmd_servo_joints_last, cmd_servo_joints
    diff = [cmd_servo_joints[0] - cmd_servo_joints_last[0], cmd_servo_joints[1] - cmd_servo_joints_last[1], cmd_servo_joints[2] - cmd_servo_joints_last[2], cmd_servo_joints[3] - cmd_servo_joints_last[3], cmd_servo_joints[4] - cmd_servo_joints_last[4], cmd_servo_joints[5] - cmd_servo_joints_last[5]]
    cmd_servo_joints_last = cmd_servo_joints
    cmd_servo_joints = [cmd_servo_joints[0] + diff[0], cmd_servo_joints[1] + diff[1], cmd_servo_joints[2] + diff[2], cmd_servo_joints[3] + diff[3], cmd_servo_joints[4] + diff[4], cmd_servo_joints[5] + diff[5]]

    return cmd_servo_joints

def servoThread():
    global cmd_servo_state, cmd_servo_joints
    global extrapolate_max_count, extrapolate_count
    textmsg("ExternalControl: Starting servo thread")
    state = SERVO_IDLE
    while control_mode == MODE_SERVOJ:
        joints = cmd_servo_joints
        do_extrapolate = False
        if (cmd_servo_state == SERVO_IDLE):
            do_extrapolate = True

        state = cmd_servo_state
        if cmd_servo_state > SERVO_UNINITIALIZED:
            cmd_servo_state = SERVO_IDLE

        if do_extrapolate:
            extrapolate_count = extrapolate_count + 1
            if extrapolate_count > extrapolate_max_count:
                extrapolate_max_count = extrapolate_count
            joints = extrapolate()
            servoj(joints, {{SERVO_J_REPLACE}})

        elif state == SERVO_RUNNING:
            extrapolate_count = 0
            servoj(joints, {{SERVO_J_REPLACE}})
        else:
            extrapolate_count = 0
            sync()
    textmsg("ExternalControl: servo thread ended")
    stopj(STOPJ_ACCELERATION)


def trajectoryClearPoints():
    global trajectory_point_num
    while trajectory_point_num > 0:
      raw_point = socket_read_binary_integer(TRAJECTORY_DATA_SIZE, "trajectory_socket")
      trajectory_point_num = trajectory_point_num - 1

def setSpeedl(tool_vel):
    global cmd_speedl_tool_speed
    global control_mode
    control_mode = MODE_SPEEDL
    cmd_speedl_tool_speed = tool_vel

def setSpeedj(joint_vel):
    global cmd_speed_joint
    global control_mode
    control_mode = MODE_SPEEDJ
    cmd_speed_joint = joint_vel

def speedlThread():
    global cmd_speedl_tool_speed
    textmsg("Starting speedl thread")
    while control_mode == MODE_SPEEDL:
        speedl_tool_speed = cmd_speedl_tool_speed
        speedl(speedl_tool_speed, 40.0, steptime)
    textmsg("speedl thread ended")
    stopj(STOPJ_ACCELERATION)

def speedjThread():
    global cmd_speed_joint
    textmsg("Starting speedj thread")
    while control_mode == MODE_SPEEDJ:
        speedj_vel = cmd_speed_joint
        speedj(speedj_vel, 40.0, steptime)
    textmsg("speedj thread ended")
    stopj(STOPJ_ACCELERATION)

# Thread to receive one shot script commands, the commands shouldn't be blocking
def scriptCommands():
    while control_mode > MODE_STOPPED:
        raw_command = socket_read_binary_integer(SCRIPT_COMMAND_DATA_SIZE, "script_command_socket", 0)
        if raw_command[0] > 0:
            command = raw_command[1]
            if command == SCRIPT_CMD_ZERO_FTSENSOR:
                zero_ftsensor()
            elif command == SCRIPT_CMD_SET_PAYLOAD:
                mass = raw_command[2] / COMMON_ZOOM_RATIO
                cog = [raw_command[3] / COMMON_ZOOM_RATIO, raw_command[4] / COMMON_ZOOM_RATIO, raw_command[5] / COMMON_ZOOM_RATIO]
                set_payload(mass, cog)
            elif command == SCRIPT_CMD_SET_TOOL_VOLTAGE:
                tool_voltage = raw_command[2] / COMMON_ZOOM_RATIO
                set_tool_voltage(int(tool_voltage))
            elif command == SCRIPT_CMD_START_FORCE_MODE:
                task_frame = [raw_command[2] / COMMON_ZOOM_RATIO, raw_command[3] / COMMON_ZOOM_RATIO, raw_command[4] / COMMON_ZOOM_RATIO, raw_command[5] / COMMON_ZOOM_RATIO, raw_command[6] / COMMON_ZOOM_RATIO, raw_command[7] / COMMON_ZOOM_RATIO]
                selection_vector = [raw_command[8] / COMMON_ZOOM_RATIO, raw_command[9] / COMMON_ZOOM_RATIO, raw_command[10] / COMMON_ZOOM_RATIO, raw_command[11] / COMMON_ZOOM_RATIO, raw_command[12] / COMMON_ZOOM_RATIO, raw_command[13] / COMMON_ZOOM_RATIO]
                wrench = [raw_command[14] / COMMON_ZOOM_RATIO, raw_command[15] / COMMON_ZOOM_RATIO, raw_command[16] / COMMON_ZOOM_RATIO, raw_command[17] / COMMON_ZOOM_RATIO, raw_command[18] / COMMON_ZOOM_RATIO, raw_command[19] / COMMON_ZOOM_RATIO]
                force_type = raw_command[20]
                force_limits = [raw_command[21] / COMMON_ZOOM_RATIO, raw_command[22] / COMMON_ZOOM_RATIO, raw_command[23] / COMMON_ZOOM_RATIO, raw_command[24] / COMMON_ZOOM_RATIO, raw_command[25] / COMMON_ZOOM_RATIO, raw_command[26] / COMMON_ZOOM_RATIO]
                force_mode(task_frame, selection_vector, wrench, force_type, force_limits)
            elif command == SCRIPT_CMD_END_FORCE_MODE:
                end_force_mode()

# HEADER_END


# NODE_CONTROL_LOOP_BEGINS
socket_open("{{SERVER_IP_REPLACE}}", {{REVERSE_PORT_REPLACE}}, "reverse_socket")
socket_open("{{SERVER_IP_REPLACE}}", {{TRAJECTORY_SERVER_PORT_REPLACE}}, "trajectory_socket")
socket_open("{{SERVER_IP_REPLACE}}", {{SCRIPT_COMMAND_PORT_REPLACE}}, "script_command_socket")

# Global variate init
cmd_speedl_tool_speed = [0, 0, 0, 0, 0, 0]
cmd_speed_joint = [0, 0, 0, 0, 0, 0]
control_mode = MODE_UNINITIALIZED
steptime = get_steptime()
trajectory_point_num = 0
cmd_servo_state = SERVO_UNINITIALIZED
cmd_servo_joints = get_actual_joint_positions()
cmd_servo_joints_last = get_actual_joint_positions()
extrapolate_count = 0
extrapolate_max_count = 0
script_command_thread_handle = start_thread(scriptCommands, ())
move_thread_handle = 0
trajectory_thread_handle = 0
read_timeout = 0.0 # First read is blocking

while control_mode > MODE_STOPPED:
    params_mult = socket_read_binary_integer(REVERSE_DATA_SIZE, "reverse_socket", read_timeout)
    if params_mult[0] > 0:
        # Convert to read timeout from milliseconds to seconds
        read_timeout = params_mult[1] / 1000.0

        # Update new motion mode
        if control_mode != params_mult[REVERSE_DATA_SIZE]:
            # Clear remaining trajectory points
            if control_mode == MODE_TRAJECTORY:
                stop_thread(trajectory_thread_handle)
                trajectory_thread_handle = 0
                stopj(STOPJ_ACCELERATION)
                trajectoryClearPoints()
                socket_send_int(TRAJECTORY_RESULT_CANCELED, "trajectory_socket")
            else:
                stop_thread(move_thread_handle)
                move_thread_handle = 0
                stopj(STOPJ_ACCELERATION)

            control_mode = params_mult[REVERSE_DATA_SIZE]
            
            if control_mode == MODE_SPEEDL:
                move_thread_handle = start_thread(speedlThread, ())
            elif control_mode == MODE_TRAJECTORY:
                stop_thread(move_thread_handle)
                move_thread_handle = 0
                stopj(STOPJ_ACCELERATION)
            elif control_mode == MODE_SPEEDJ:
                move_thread_handle = start_thread(speedjThread, ())
            elif control_mode == MODE_SERVOJ:
                move_thread_handle = start_thread(servoThread, ())
            
        # Update the motion commands with new parameters
        if control_mode == MODE_SERVOJ:
            joints = [params_mult[2]/ POS_ZOOM_RATIO, params_mult[3]/ POS_ZOOM_RATIO, params_mult[4]/ POS_ZOOM_RATIO, params_mult[5]/ POS_ZOOM_RATIO, params_mult[6]/ POS_ZOOM_RATIO, params_mult[7]/ POS_ZOOM_RATIO]
            setServoSetpoint(joints)
        elif control_mode == MODE_SPEEDL:
            setSpeedl([params_mult[2] / POS_ZOOM_RATIO, params_mult[3] / POS_ZOOM_RATIO, params_mult[4] / POS_ZOOM_RATIO, params_mult[5] / POS_ZOOM_RATIO, params_mult[6] / POS_ZOOM_RATIO, params_mult[7] / POS_ZOOM_RATIO])
        elif control_mode == MODE_SPEEDJ:
            setSpeedj([params_mult[2] / POS_ZOOM_RATIO, params_mult[3] / POS_ZOOM_RATIO, params_mult[4] / POS_ZOOM_RATIO, params_mult[5] / POS_ZOOM_RATIO, params_mult[6] / POS_ZOOM_RATIO, params_mult[7] / POS_ZOOM_RATIO])
        elif control_mode == MODE_TRAJECTORY:
            if params_mult[2] == TRAJECTORY_ACTION_START:
                stop_thread(trajectory_thread_handle)
                trajectory_thread_handle = 0
                trajectoryClearPoints()
                trajectory_point_num = params_mult[3]
                trajectory_thread_handle = start_thread(trajectoryThread, ())
            elif params_mult[2] == TRAJECTORY_ACTION_CANCEL:
                textmsg("Trajectory cancel received")
                stop_thread(trajectory_thread_handle)
                trajectory_thread_handle = 0
                trajectoryClearPoints()
                stopj(STOPJ_ACCELERATION)
                socket_send_int(TRAJECTORY_RESULT_CANCELED, "trajectory_socket")
              

    else:
        textmsg("Socket timed out waiting for command on reverse_socket. The script will exit now.")
        control_mode = MODE_STOPPED

stop_thread(script_command_thread_handle)
stop_thread(move_thread_handle)
stop_thread(trajectory_thread_handle)
stopj(STOPJ_ACCELERATION)
textmsg("ExternalControl: All threads ended")
socket_close("reverse_socket")
socket_close("trajectory_socket")


# NODE_CONTROL_LOOP_ENDS
